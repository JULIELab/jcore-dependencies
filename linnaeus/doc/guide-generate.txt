Guide to running LINNAEUS in order to generate a new dictionaries used for matching.

This file was last modified July 21th 2011, for LINNAEUS v. 2.0.

The .jar file is invoked through the following command:
$java -Xmx<memory amount> -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers <options>
  <memory amount> should be high enough to accomodate the software, or an OutOfMemoryError will be thrown.

This tool can be used to generate dictionaries, suitable for fast matching by LINNAEUS.
It can produce two types of dictionaries:
	* a simple dictionary containing all name variants of an entity (when the names are finite).
	* automatons, useful for more general-purpose regular-expression matching (where the set of possible names is either not finite, or extremely large).
	
The first input is a file with regular expressions, that then are converted either to a list of name variants or automatons.	

Generating name variants:
This requires less memory than the automatons, and is more straightforward. Note that complex regular expressions may produce very large numbers of name variants.

Generating automatons:
Generating the automatons require very large amounts of memory. Because of this, generating them can be performed in iterations, reducing the amount of required memory. First, one automaton per species is constructed. These are then iteratively joined together into larger and larger automatons until either only a single automaton remains or the memory limit of the computer is reached (the amount of required memory increases as the size of the automatons increases). Fewer automatons results in reduced time requirements for the matching software, but are not necessary.

Note: the automatons that are processed by this software is of another type than the ones used by the main LINNAEUS matcher. Once the automatons have been joined together as far as possible, they should be converted to the final automaton format (called RunAutomatons in this guide).

Options:
   --properties <configuration file> 
      Note the options can be specified in a special properties file in a key=value format. Note that any paths have to be full.

	INPUT
		--regexp <regular expression file>
			Will load a file containing entity regular expressions on the form "entity_id (tab) regular expression". These regular expressions can later be saved to an automaton using the --saveArray or --saveRArray command. Note that the regular expression language is limited to that supperted by dk.brics.automaton (see http://www.brics.dk/automaton/doc/index.html?dk/brics/automaton/RegExp.html for details).

		--loadArray <file> 
			Loads a list of automatons from a file.
			
		One of these options have to be specified.

	PROCESSING
		--multiJoin <factor>
			Will join a number of automatons together. For example, if 100 automatons were loaded and --multiJoin 4 was specified, the result would be 25 automatons (matching the same language as the original 100).
		--minimizeArray
			Minimizes the automatons, effectively reducing the number of states a little bit.
			
		These options are used for processing automatons (not required when converting regular expressions to name variants)
			
	OUTPUT
		--storeArray <file>
			Save automatons to a file
			
		--storeRArray <file>
			Convert the automatons to RunAutomatons and store them in a file that can be read by the main LINNAEUS matching software.
			
		--convertToVariants <file>
			Converts the regular expressions read in the input stage into a (possibly very long) list of possible name variants, and prints these to a file that can be read by LINNAEUS.
	
	MISCALLENEOUS
		--threads <number>
			Specifies how many threads should be used for computations. Note that if two threads are used, the amount of memory required will essentially be doubled (as two computations are performed at the same time). When working with small automatons multiple threads can easily be used, while the number of threads should be reduced as the size of the automatons increases.
			Using a high number of threads is fine when generating name variants.

EXAMPLE
	Generating automatons:
		First, load the regular expressions for the species dictionary (available for download separately), print the regular expression associated to human (species:ncbi:9606), convert the regular expressions into an array of automatons using four concurrent threads, and finally save the result to species.bin.0. 
		
		$java -Xmx10G -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers --regexp species-regexp.tsv --examine 9606 --storeArray species.bin.0 --threads 4
		
		Second, run a few times to reduce the number of automatons:
		
		$java -Xmx10G -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers --loadArray species.bin.0 --multiJoin 8 --threads 4 --minimizeArray --storeArray species.bin.1
	
		$java -Xmx10G -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers --loadArray species.bin.1 --multiJoin 8 --threads 2 --storeArray species.bin.2
	
		$java -Xmx10G -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers --loadArray species.bin.2 --multiJoin 4 --threads 1 --storeArray species.bin.3
		
		Last, load the automatons, convert them to RunAutomatons (used for matching in the main LINNAEUS tagging software), and store as the final automaton file:
		
		$java -Xmx10G -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers --loadArray species.bin.3 --storeRArray species.bin
		
		Naturally, this is rather tedious, so a script file can be useful.
		
	Generating name variants:
		$java -Xmx2G -cp linnaeus-2.0.jar uk.ac.man.entitytagger.generate.GenerateMatchers --regexp species-regexp.tsv --threads 8 --convertToVariants species-variants.tsv